{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["App","useState","country","setCountry","location","setLocation","total","setTotal","byCountry","useEffect","axios","get","then","res","data","All","catch","err","console","log","state","labels","datasets","label","fill","confirmed","recovered","deaths","borderColor","borderWidth","className","scope","population","onSubmit","e","preventDefault","arr","toLowerCase","split","i","length","charAt","toUpperCase","slice","str","join","countryy","url","findByCountry","type","name","value","onChange","target","placeholder","required","loading","continent","sq_km_area","life_expectancy","updated","options","title","display","text","fontZise","legend","position","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"mQAOe,SAASA,IAEtB,MAA8BC,mBAAS,IAAvC,mBAAOC,EAAP,KAAgBC,EAAhB,KACA,EAAgCF,mBAAS,IAAzC,mBAAOG,EAAP,KAAiBC,EAAjB,KACA,EAA0BJ,mBAAS,IAAnC,mBAAOK,EAAP,KAAcC,EAAd,KAKQC,EAAS,4DAAwDN,GAGvEO,qBAAU,WACNC,IAAMC,IANK,4DAOVC,MAAK,SAACC,GAELN,EAASM,EAAIC,KAAKC,QAEnBC,OAAM,SAACC,GACNC,QAAQC,IAAIF,QACf,IAEHR,qBAAU,WACRC,IAAMC,IAAIH,GACTI,MAAK,SAACC,GACLK,QAAQC,IAAIN,EAAIC,MAChBT,EAAYQ,EAAIC,SAEjBE,OAAM,SAACC,GACNC,QAAQC,IAAIF,QACb,IAKD,IA0CMG,EAAQ,CACZC,OAAQ,CAAC,YAAa,YAAa,SAAU,WAC7CC,SAAU,CAAC,CACTC,MAAOrB,EAAU,wBACjBsB,MAAM,EACNV,KAAM,CAACV,EAASqB,UAAWrB,EAASsB,UAAWtB,EAASuB,QACxDC,YAAa,OACbC,YAAa,KAKrB,OACE,sBAAKC,UAAU,6CAAf,UACE,oBAAIA,UAAU,YAAd,iCAEE,6CACA,wBACAA,UAAU,yDADV,UAEE,uBAAOA,UAAU,eAAjB,SACE,+BACA,oBAAIC,MAAM,MAAV,uBACA,oBAAIA,MAAM,MAAV,oBACA,oBAAIA,MAAM,MAAV,6BAGF,gCACA,+BACA,6BAAMzB,EAAMmB,YACZ,6BAAMnB,EAAMqB,SACZ,6BAAMrB,EAAM0B,qBAKd,uBAAMF,UAAU,kBAAkBG,SA1DlB,SAACC,GACjBA,EAAEC,iBAOF,IAHD,IAAMC,EAAMlC,EAAQmC,cAAcC,MAAM,KAG9BC,EAAI,EAAGA,EAAIH,EAAII,OAAQD,IAC9BH,EAAIG,GAAKH,EAAIG,GAAGE,OAAO,GAAGC,cAAgBN,EAAIG,GAAGI,MAAM,GAIzD,IAAMC,EAAMR,EAAIS,KAAK,KAGrB3B,QAAQC,IAAIyB,GA3BQ,SAACE,GACrB,IAAMC,EAAG,4DAAwDD,GACjEpC,IAAMC,IAAIoC,GACTnC,MAAK,SAACC,GACLK,QAAQC,IAAIN,EAAIC,MAChBT,EAAYQ,EAAIC,KAAKC,QAEtBC,OAAM,SAACC,GACNC,QAAQC,IAAIF,MAqBf+B,CAAcJ,GACb1B,QAAQC,IAAIf,EAASW,MAuCrB,UACE,yDACA,uBAAOkC,KAAK,OACVC,KAAK,UACLC,MAAQjD,EACRkD,SAlFiB,SAAClB,GAEtB/B,EACG+B,EAAEmB,OAAOF,QAgFRG,YAAY,sBACZC,UAAQ,IAEV,uBAAON,KAAK,SAASE,MAAM,WAC3B,0BAGF,uBAECjD,EACD,sBAAK4B,UAAU,qBAAf,UACA,qBAAIA,UAAU,YAAd,UAA2B5B,EAA3B,WACA,wBAAQsD,QAAQ,OACf1B,UAAU,mDADX,UAEE,uBAAOA,UAAU,eAAjB,SACE,+BACA,oBAAIC,MAAM,MAAV,uBACA,oBAAIA,MAAM,MAAV,0BACA,oBAAIA,MAAM,MAAV,wBACA,oBAAIA,MAAM,MAAV,kCAGF,gCACA,+BACA,6BAAM3B,EAASqD,YACf,+BAAMrD,EAASsD,WAAf,SACA,6BAAMtD,EAAS4B,aACf,+BAAM5B,EAASuD,gBAAf,cAGA,uBAAO7B,UAAU,eAAjB,SACE,6BACE,6CAGJ,gCACE,6BACA,6BAAM1B,EAASwD,iBAKnB,8BACE,cAAC,IAAD,CACE9C,KAAMM,EACNyC,QAAS,CACPC,MAAM,CACJC,SAAQ,EACRC,KAAM,oBACNC,SAAU,IAEZC,OAAQ,CACNH,SAAS,EACTI,SAAU,iBAQlB,kDAEA,0BC5LR,IAYeC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqB1D,MAAK,YAAkD,IAA/C2D,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.cb20f065.chunk.js","sourcesContent":["import axios from 'axios';\r\nimport React, {useState, useEffect} from 'react'\r\nimport {Line} from 'react-chartjs-2'\r\n\r\n\r\nimport './App.css';\r\n\r\nexport default function App() {\r\n\r\n  const [country, setCountry] = useState('')\r\n  const [location, setLocation] = useState([])\r\n  const [total, setTotal] = useState([]) \r\n\r\n  //api name\r\n    const global = 'https://covid-api.mmediagroup.fr/v1/cases?country=Global'\r\n\r\n    const byCountry = `https://covid-api.mmediagroup.fr/v1/cases?country=${country}`\r\n\r\n    //Make petition to api\r\n    useEffect(() =>{\r\n        axios.get(global)\r\n        .then((res)=> {\r\n          //console.log(res)\r\n          setTotal(res.data.All)\r\n        })\r\n        .catch((err) => {\r\n          console.log(err)})\r\n    }, [])\r\n\r\n    useEffect(() =>{\r\n      axios.get(byCountry)\r\n      .then((res)=> {\r\n        console.log(res.data)\r\n        setLocation(res.data)\r\n      })\r\n      .catch((err) => {\r\n        console.log(err)})\r\n    }, [])\r\n\r\n    \r\n\r\n    //get value from select area or input area\r\n      const countryHandler = (e) => {\r\n        //console.log(e.target.value)\r\n        setCountry(\r\n           e.target.value\r\n        )\r\n      }\r\n\r\n      // \r\n      const findByCountry = (countryy) =>{\r\n        const url = `https://covid-api.mmediagroup.fr/v1/cases?country=${countryy}`\r\n        axios.get(url)\r\n        .then((res)=> {\r\n          console.log(res.data)\r\n          setLocation(res.data.All)\r\n        })\r\n        .catch((err) => {\r\n          console.log(err)})\r\n      }\r\n\r\n      const sendQuery = (e) => {\r\n        e.preventDefault()\r\n       // setCountry(country)\r\n\r\n       //setup the string in variable \"conuntry\" to make it an array\r\n       const arr = country.toLowerCase().split(\" \")\r\n\r\n       //loop through each element of the array and capitalize the first letter\r\n        for (var i = 0; i < arr.length; i++){\r\n          arr[i] = arr[i].charAt(0).toUpperCase() + arr[i].slice(1)\r\n        }\r\n\r\n        //join all the elements of the array back into a new string using a blanck space as separator\r\n        const str = arr.join(\" \")\r\n        \r\n        //const str = country.charAt(0).toUpperCase() + country.slice(1)\r\n        console.log(str)\r\n        \r\n       findByCountry(str)\r\n        console.log(location.All)\r\n      }\r\n\r\n      //config the chart\r\n      const state = {\r\n        labels: ['Confirmed', 'Recovered', 'Deaths', 'Updated'],\r\n        datasets: [{\r\n          label: country + ' report covid-19 data',\r\n          fill: false,\r\n          data: [location.confirmed, location.recovered, location.deaths],\r\n          borderColor: '#000',\r\n          borderWidth: 2\r\n        }]\r\n      };\r\n\r\n   \r\n  return (\r\n    <div className=\"App container mt-3 mb-5 bg-primary rounded\">\r\n      <h1 className=\"display-2\">World Covid-19 data</h1>\r\n\r\n        <h2>Global data</h2>\r\n        <table\r\n        className=\"table table-primary table-bordered table-responsive-sm\">\r\n          <thead className=\"table-active\">\r\n            <tr>\r\n            <th scope=\"col\">Confirmed</th>\r\n            <th scope=\"col\">Deaths</th>\r\n            <th scope=\"col\">Population</th>\r\n            </tr>\r\n          </thead>\r\n          <tbody>\r\n          <tr>\r\n          <td>{ total.confirmed }</td>\r\n          <td>{ total.deaths }</td>\r\n          <td>{ total.population }</td>\r\n          </tr>\r\n          </tbody>          \r\n        </table>\r\n\r\n        <form className=\"form-group mt-5\" onSubmit={sendQuery}>\r\n          <p>Search your country here</p>\r\n          <input type=\"text\"\r\n            name=\"country\"\r\n            value={ country }\r\n            onChange={ countryHandler }\r\n            placeholder=\"Type a country here\"\r\n            required\r\n          />\r\n          <input type=\"submit\" value=\"Search\" />\r\n          <br/>\r\n        </form>\r\n\r\n        <br/>\r\n       \r\n       { country ? \r\n        <div className=\"container bg-covid\">\r\n        <h2 className=\"display-6\">{country} data</h2>\r\n        <table  loading=\"lazy\"\r\n         className=\"table table-info table-bordered table-responsive\">\r\n          <thead className=\"table-active\">\r\n            <tr>\r\n            <th scope=\"col\">Continent</th>\r\n            <th scope=\"col\">Country area</th>\r\n            <th scope=\"col\">Population</th>\r\n            <th scope=\"col\">Life expectancy</th>\r\n            </tr>\r\n          </thead>\r\n          <tbody>\r\n          <tr>\r\n          <td>{ location.continent }</td>\r\n          <td>{ location.sq_km_area } km</td>\r\n          <td>{ location.population }</td>\r\n          <td>{ location.life_expectancy } ~ </td>\r\n          </tr>\r\n          </tbody>\r\n          <thead className=\"table-active\">\r\n            <tr>\r\n              <th>Updated</th>\r\n            </tr>\r\n          </thead>   \r\n          <tbody>\r\n            <tr>\r\n            <td>{ location.updated }</td>\r\n            </tr>\r\n          </tbody>     \r\n        </table>\r\n\r\n        <div>\r\n          <Line\r\n            data={state}\r\n            options={{\r\n              title:{\r\n                display:true,\r\n                text: 'this is the chart',\r\n                fontZise: 20\r\n              },\r\n              legend: {\r\n                display: true,\r\n                position: 'right'\r\n              }\r\n            }}\r\n           />\r\n        </div>\r\n\r\n        </div>\r\n        :\r\n        <p>Type your country</p>\r\n        }\r\n        <br/>\r\n    </div>\r\n  );\r\n}\r\n","const reportWebVitals = onPerfEntry => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}
{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["App","useState","country","setCountry","location","setLocation","total","setTotal","byCountry","useEffect","axios","get","then","res","data","All","catch","err","console","log","getData","a","fetch","json","pais","className","scope","confirmed","deaths","population","onSubmit","e","preventDefault","type","name","value","onChange","target","placeholder","required","loading","continent","sq_km_area","life_expectancy","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"kSAKe,SAASA,IAEtB,MAA8BC,mBAAS,CAACC,QAAQ,KAAhD,mBAAOA,EAAP,KAAgBC,EAAhB,KACA,EAAgCF,mBAAS,IAAzC,mBAAOG,EAAP,KAAiBC,EAAjB,KACA,EAA0BJ,mBAAS,IAAnC,mBAAOK,EAAP,KAAcC,EAAd,KAKQC,EAAS,4DAAwDN,EAAQA,SAG/EO,qBAAU,WACNC,IAAMC,IANK,4DAOVC,MAAK,SAACC,GAELN,EAASM,EAAIC,KAAKC,QAEnBC,OAAM,SAACC,GACNC,QAAQC,IAAIF,QACf,IAaHR,qBAAU,WACRW,MACC,CAAChB,IAGJ,IAAMgB,EAAO,uCAAG,8BAAAC,EAAA,sEACOC,MAAMd,GADb,cACNM,EADM,gBAEOA,EAAKS,OAFZ,OAENC,EAFM,OAGZnB,EAAYmB,GAHA,2CAAH,qDAqBf,OACE,sBAAKC,UAAU,kCAAf,UACE,oBAAIA,UAAU,YAAd,iCAEE,6CACA,wBACAA,UAAU,sDADV,UAEE,uBAAOA,UAAU,eAAjB,SACE,+BACA,oBAAIC,MAAM,MAAV,uBACA,oBAAIA,MAAM,MAAV,oBACA,oBAAIA,MAAM,MAAV,6BAGF,gCACA,+BACA,6BAAMpB,EAAMqB,YACZ,6BAAMrB,EAAMsB,SACZ,6BAAMtB,EAAMuB,qBAKd,uBAAMJ,UAAU,kBAAkBK,SA9BlB,SAACC,GACjBA,EAAEC,iBACF7B,EAAWD,GACXgB,QAAQC,IAAIf,EAASW,MA2BrB,UACE,yDACA,uBAAOkB,KAAK,OACVC,KAAK,UACLC,MAAQjC,EAAQA,QAChBkC,SA3CiB,SAACL,GAEtB5B,EAAW,2BACND,EAAQA,SADH,kBAEP6B,EAAEM,OAAOH,KAAQH,EAAEM,OAAOF,UAwCzBG,YAAY,WACZC,UAAQ,IAEV,uBAAON,KAAK,SAASE,MAAM,WAC3B,0BAEF,uBAECjC,EAAQA,QACT,qCACA,qBAAIuB,UAAU,YAAd,UAA2BvB,EAAQA,QAAnC,WACA,wBAAQsC,QAAQ,OACff,UAAU,mDADX,UAEE,uBAAOA,UAAU,eAAjB,SACE,+BACA,oBAAIC,MAAM,MAAV,uBACA,oBAAIA,MAAM,MAAV,0BACA,oBAAIA,MAAM,MAAV,wBACA,oBAAIA,MAAM,MAAV,kCAGF,gCACA,+BACA,6BAAMtB,EAASqC,YACf,+BAAMrC,EAASsC,WAAf,SACA,6BAAMtC,EAASyB,aACf,+BAAMzB,EAASuC,gBAAf,oBAMF,kDAEA,0BC/HR,IAYeC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBlC,MAAK,YAAkD,IAA/CmC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.c940f02b.chunk.js","sourcesContent":["import axios from 'axios';\nimport React, {useState, useEffect} from 'react'\n\nimport './App.css';\n\nexport default function App() {\n\n  const [country, setCountry] = useState({country:''})\n  const [location, setLocation] = useState([])\n  const [total, setTotal] = useState([]) \n\n  //api name\n    const global = 'https://covid-api.mmediagroup.fr/v1/cases?country=Global'\n\n    const byCountry = `https://covid-api.mmediagroup.fr/v1/cases?country=${country.country}`\n\n    //Make petition to api\n    useEffect(() =>{\n        axios.get(global)\n        .then((res)=> {\n          //console.log(res)\n          setTotal(res.data.All)\n        })\n        .catch((err) => {\n          console.log(err)})\n    }, [])\n\n    /* useEffect(() =>{\n      axios.get(byCountry)\n      .then((res)=> {\n        //console.log(res)\n        setLocation(res.data.All)\n      })\n      .catch((err) => {\n        console.log(err)})\n    }, [byCountry])\n     */\n\n    useEffect(() => {\n      getData()\n    }, [location])\n\n    //we put a async await to give time to load the new call\n    const getData = async () => {\n        const data = await fetch(byCountry)\n        const pais = await data.json()\n        setLocation(pais)\n    }\n    //get value from select area or input area\n      const countryHandler = (e) => {\n        //console.log(e.target.value)\n        setCountry({\n          ...country.country,\n          [e.target.name] : e.target.value\n        })\n      }\n\n      const sendQuery = (e) => {\n        e.preventDefault()\n        setCountry(country)\n        console.log(location.All)\n      }\n\n   \n  return (\n    <div className=\"App container mt-3 mb-5 bg-dark\">\n      <h1 className=\"display-2\">World Covid-19 data</h1>\n\n        <h2>Global data</h2>\n        <table\n        className=\"table table-dark table-bordered table-responsive-sm\">\n          <thead className=\"table-active\">\n            <tr>\n            <th scope=\"col\">Confirmed</th>\n            <th scope=\"col\">Deaths</th>\n            <th scope=\"col\">Population</th>\n            </tr>\n          </thead>\n          <tbody>\n          <tr>\n          <td>{ total.confirmed }</td>\n          <td>{ total.deaths }</td>\n          <td>{ total.population }</td>\n          </tr>\n          </tbody>          \n        </table>\n\n        <form className=\"form-group mt-5\" onSubmit={sendQuery}>\n          <p>Search your country here</p>\n          <input type=\"text\"\n            name=\"country\"\n            value={ country.country }\n            onChange={countryHandler}\n            placeholder=\"Colombia\"\n            required\n          />\n          <input type=\"submit\" value=\"Search\" />\n          <br/>\n        </form>\n        <br/>\n       \n       { country.country ? \n        <>\n        <h2 className=\"display-6\">{country.country} data</h2>\n        <table  loading=\"lazy\"\n         className=\"table table-dark table-bordered table-responsive\">\n          <thead className=\"table-active\">\n            <tr>\n            <th scope=\"col\">Continent</th>\n            <th scope=\"col\">Country area</th>\n            <th scope=\"col\">Population</th>\n            <th scope=\"col\">Life expectancy</th>\n            </tr>\n          </thead>\n          <tbody>\n          <tr>\n          <td>{ location.continent }</td>\n          <td>{ location.sq_km_area } km</td>\n          <td>{ location.population }</td>\n          <td>{ location.life_expectancy } ~ </td>\n          </tr>\n          </tbody>          \n        </table>\n        </>\n        :\n        <p>Type your country</p>\n        }\n        <br/>\n    </div>\n  );\n}\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}